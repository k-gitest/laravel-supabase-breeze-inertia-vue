<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | このオプションは、受信リクエストに使用されるデフォルトのセッションドライバーを決定します。Laravelは、セッションデータを永続化するためのさまざまなストレージオプションをサポートしています。データベースストレージは、優れたデフォルトの選択肢です。
    |
    | Supported: "file", "cookie", "database", "apc",
    |            "memcached", "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | ここでは、セッションが期限切れになる前に許可されるアイドル状態の分数を指定できます。ブラウザが閉じられるとすぐに期限切れにしたい場合は、expire_on_close 構成オプションを使用してそれを指定することができます。
    |
    */

    'lifetime' => env('SESSION_LIFETIME', 120),

    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | このオプションを使用すると、すべてのセッションデータが保存される前に簡単に暗号化されるように指定できます。暗号化はすべてLaravelによって自動的に行われ、通常どおりセッションを使用することができます。
    |
    */

    'encrypt' => env('SESSION_ENCRYPT', false),

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | "file"セッションドライバーを利用する場合、セッションファイルはディスク上に配置されます。デフォルトの保存場所はここで定義されていますが、別の保存場所を指定することも自由です。
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | "database"または"redis"セッションドライバーを使用する場合、これらのセッションを管理するために使用する接続を指定できます。これは、データベース構成オプション内の接続に対応する必要があります。
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | "database"セッションドライバーを使用する場合、セッションを保存するために使用するテーブルを指定できます。もちろん、適切なデフォルトがあらかじめ定義されていますが、別のテーブルに変更することも歓迎されています。
    |
    */

    'table' => env('SESSION_TABLE', 'sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | フレームワークのキャッシュ駆動型セッションバックエンドの1つを使用する場合、リクエスト間でセッションデータを保存するために使用するキャッシュストアを定義できます。これは、定義されたキャッシュストアの1つと一致する必要があります。
    |
    | Affects: "apc", "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | 一部のセッションドライバーは、古いセッションを保存から削除するために、手動でストレージの場所を掃除する必要があります。特定のリクエストでそれが起こる確率は次のとおりです。デフォルトでは、100回のリクエスト中で2回の確率です。
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | ここでは、フレームワークによって作成されるセッションクッキーの名前を変更できます。通常、この値を変更する必要はありません。なぜなら、変更しても有意義なセキュリティ向上が得られないからです。
    |
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | セッションクッキーのパスは、そのクッキーが利用可能と見なされるパスを決定します。通常、これはアプリケーションのルートパスになりますが、必要に応じて変更することができます。
    |
    */

    'path' => env('SESSION_PATH', '/'),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | この値は、セッションクッキーが利用可能なドメインとサブドメインを決定します。デフォルトでは、クッキーはルートドメインとすべてのサブドメインで利用可能です。通常、これを変更する必要はありません。
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | このオプションを true に設定することで、ブラウザがHTTPS接続を持っている場合にのみセッションクッキーがサーバーに送信されます。これにより、セキュアに行うことができない場合にクッキーが送信されなくなります。
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | この値を true に設定すると、JavaScriptからクッキーの値にアクセスできなくなり、クッキーはHTTPプロトコルを介してのみアクセス可能になります。このオプションを無効にする必要はほとんどないでしょう。
    |
    */

    'http_only' => env('SESSION_HTTP_ONLY', true),

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | このオプションは、クロスサイトリクエストが発生した場合にクッキーの振る舞いを決定し、CSRF攻撃を緩和するために使用できます。デフォルトでは、安全なクロスサイトリクエストを許可するために、この値を "lax" に設定します。
    |
    | See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => env('SESSION_SAME_SITE', 'lax'),

    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | この値を true に設定すると、クロスサイトコンテキストでクッキーをトップレベルサイトに紐づけます。パーティション化されたクッキーは、「secure」フラグが設定され、Same-Site属性が「none」に設定された場合に、ブラウザによって受け入れられます。
    |
    */

    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),

];
