<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | このオプションは、アプリケーションのデフォルトの認証「ガード」とパスワードリセット「ブローカー」を定義します。必要に応じてこれらの値を変更できますが、ほとんどのアプリケーションには最適なスタートです。
    |
    */

    'defaults' => [
        'guard' => env('AUTH_GUARD', 'web'),
        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | 次に、アプリケーションのすべての認証ガードを定義できます。もちろん、セッションストレージとEloquentユーザープロバイダーを利用する素晴らしいデフォルト設定がすでに定義されています。

すべての認証ガードにはユーザープロバイダーがあり、これは実際にユーザーがデータベースから取得される方法を定義します。通常、Eloquentが利用されます。
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],

        'admin' => [
            'driver' => 'session',
            'provider' => 'admins',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | すべての認証ガードにはユーザープロバイダーがあり、これは実際にユーザーがデータベースから取得される方法を定義します。通常、Eloquentが利用されます。

複数のユーザーテーブルやモデルがある場合は、モデル/テーブルを表す複数のプロバイダーを構成できます。これらのプロバイダーは、定義した追加の認証ガードに割り当てることができます。
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => env('AUTH_MODEL', App\Models\User::class),
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
        'admins' => [
            'driver' => 'eloquent',
            'model' => App\Models\Admin::class,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | これらの設定オプションは、Laravelのパスワードリセット機能の動作を指定します。これには、トークンの保存に使用されるテーブルや、実際にユーザーを取得するために呼び出されるユーザープロバイダーが含まれます。

有効期限は、各リセットトークンが有効と見なされる分数です。このセキュリティ機能は、トークンを短命化して推測される時間を短くし、推測される時間を短くします。必要に応じてこれを変更できます。

スロットル設定は、ユーザーが追加のパスワードリセットトークンを生成する前に待機する秒数です。これにより、ユーザーが非常に多くのパスワードリセットトークンをすばやく生成するのを防ぎます。
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | ここでは、パスワード確認画面を介してユーザーにパスワードを再入力するよう求めるまでの秒数を定義できます。デフォルトでは、タイムアウトは3時間続きます。
    |
    */

    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),

];
